#version 460

layout (location=0) in vec3 position;
layout (location=1) in vec3 normals;
layout (location=2) in vec2 texuv;

const int MAX_DIRECTIONAL_LIGHTS = 1;
const int MAX_POINT_LIGHTS = 7;
const int MAX_SPOT_LIGHTS = 1;

uniform mat4 m_matrix;
uniform mat4 mv_matrix;
uniform mat4 proj_matrix;
uniform mat4 lightmatrix;
uniform mat4 diffuseshadowmatrixes[MAX_DIRECTIONAL_LIGHTS];
uniform mat4 spotshadowmatrixes[MAX_SPOT_LIGHTS];
uniform int clipping;
uniform vec4 clip_plane;
uniform int renderingwater;

out vec4 varyingColor;
out vec2 texcoords;
out vec3 originalposition;
out vec3 Normal;
out vec3 FragPos;
out vec4 lightpos;
out vec4 diffuselightpos[MAX_DIRECTIONAL_LIGHTS];
out vec4 spotlightpos[MAX_SPOT_LIGHTS];

/*water stuff*/
out vec4 clipspace;
out vec3 tocamera;

uniform vec3 cameraposition;

const float tiling = 1.0;

void main(void) 
{
	originalposition = vec3(m_matrix * vec4(position, 1.0));
	gl_Position = proj_matrix * mv_matrix * vec4(position,1.0);

	varyingColor = vec4(position,1) * 0.5 + vec4(0.5,0.5,0.5,0.5);

	Normal = mat3(transpose(inverse(m_matrix))) * normals;
	FragPos = (m_matrix * vec4(position,1.0f)).xyz;
	lightpos = lightmatrix * m_matrix * vec4(position,1.0f);	
	texcoords = texuv;
	
	for(int i = 0;i<MAX_DIRECTIONAL_LIGHTS;i++)
	{
		diffuselightpos[i] = diffuseshadowmatrixes[i] * m_matrix * vec4(position,1.0f);
	}
	
	for(int i = 0;i<MAX_SPOT_LIGHTS;i++)
	{
		spotlightpos[i] = spotshadowmatrixes[i] * m_matrix * vec4(position,1.0f);
	}

	if(clipping == 1)
	{
		gl_ClipDistance[0] = dot(clip_plane.xyz, FragPos) - clip_plane.w;
	}
	
	if(renderingwater == 1)
	{
		vec4 worldPosition = m_matrix * vec4(position,1.0);
		clipspace = proj_matrix * mv_matrix * vec4(position,1.0);
		gl_Position = clipspace;
		
		texcoords = texuv * tiling;
		
		tocamera = cameraposition - worldPosition.xyz;
	}
}