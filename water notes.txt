-video 2- (FBOs)
We need two FBO's, one for refraction and one for reflection
Both will have color and depth attachments

goal: set up both buffers and render both to quads to test

-video 3- (Clipping)
gl_ClipDistance[], only be using the 0th one
*have to enable it, glEnable GL_CLIP_DISTANCE0
gl_ClipDistance[0] = -1; //everything is outside and should be culled
gl_ClipDistance[0] = 1; //all are inside plane and none are culled
Plane Equation Ax + By + Cz + D = 0 //D is signed distance
(A,B,C) = (0,0,1) D = -height
(A,B,C) = (0,-1,0) D = height
D is height, im guessing height travels in direction of normal
vec4 plane = vec4(0,-1,0,15); //horiozntal plane looking down, distance of 15 or more gets culled
now gl_ClipDistance[0] = dot(worldposition,plane);//?? (planenormal*position) + D
make plane a uniform
render once to reflection, then to refraction, then to regular scene
glDisable.GL_CLIP_DISTANCE0 might not work
position camera correctly for reflection
distance = 2*	
cameraposition.y - waterheight
camera.position.y -=distance
camera.invertpitch
render
return camera back to normal

goal: show both refraction and reflection color buffers with clipping planes working

-video 4- (projective texture mapping)
in shader get both reflection and refraction textures
reflectcolor = texture(reflect,texcoords);
refractcolor = texture(refract,texcoords);
color = mix(reflectcolor,refractcolor,.5);
we need to do projective texture mapping
in shader get clipSpace to fragment which is just normal gl_position proj*view*mat*p
now convert vec2 clipspace = clipspace.xy/clipspace.w
and convert -1,1 to 0,1 
clipspace = clipspace *.5 + 0.5;
vec2 refracttexcoords = vec2(clipspace.x,clipspace.y);
vec2 reflecttexcoords = vec2(clipspace.x,-clipspace.y);

goal: first render both in a mix in the water without projecting, then use projecting. Water should look decent now

-video 5- (DuDv mapping)
just get dudv maps where each texel stores a vec2 that gives you the texture offset
they are from 0-1 so just times by 2 and substract by 1
make texture coords which were position.x*.5 + .5, same for y
get vec2 distortion by texture(dudvmap,vec2(texturecoords.x,.y) *2 - 1 * wavestrength
now refracttexcoords +=distoration1
now reflecttexcoords +=distoration2
make wave strength
theres boundary glitch so just clamp reflect,refractcoords x by 0.001 and 0.9999
y by -0.9999 -0.0001 y just in reflect
now we need ripples so create wavespeed and movefactor
movefactor %= 1
use movefactor for x texturecoords
make distortion 2, flip x coord  and move in y and add both distortions together


goal: set up dudv mapping and distortion and see if it works when its just static
now add rippling effect and see if it works

-video 6- (fresnel effect)
get and load in normal map
to make water have lighting code probably move it over to the main shader with a boolean to switch between water and normal its not that bad at all
*if its too laggy with lights just make it use diffuse lights

goal: first show the normal map to make sure it works then just make it so the lights work with it.



-raw hehe-
